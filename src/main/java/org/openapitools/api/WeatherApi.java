/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import io.swagger.annotations.*;
import org.apache.commons.logging.LogFactory;
import org.openapitools.connectors.AwsDynamoDbConnector;
import org.openapitools.connectors.AwsIotConnector;
import org.openapitools.connectors.WeatherstackConnector;
import org.openapitools.model.Credentials;
import org.openapitools.model.Weather;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-10-22T09:25:01.837144200+02:00[Europe/Berlin]")
@Validated
@Api(value = "weather", description = "the weather API")
public interface WeatherApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /weather/getCurrentWeatherOfLocation : get current weather of location
     * get current weather of location
     *
     * @param city city e.g. Eisenstadt (required)
     * @return weather sucessfully loaded (status code 200)
     *         or bad input parameter (status code 400)
     */
    @ApiOperation(value = "get current weather of location", nickname = "getCurrentWeatherOfLocation", notes = "get current weather of location", response = Weather.class, tags={ "developers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "weather sucessfully loaded", response = Weather.class),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @GetMapping(
        value = "/weather/getCurrentWeatherOfLocation",
        produces = { "application/json" }
    )
    default ResponseEntity<Weather> getCurrentWeatherOfLocation(@NotNull @ApiParam(value = "city e.g. Eisenstadt", required = true) @Valid @RequestParam(value = "city", required = true) String city) {

        LogFactory.getLog(this.getClass()).info("getCurrentWeatherOfLocation: "+city);

        Weather weather;

        try
        {
            weather = new WeatherstackConnector(Credentials.getInstance().getWeatherstackToken()).getCurrentWeatherOfLocation(city);

            return new ResponseEntity<>(weather, HttpStatus.OK);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }

        return new ResponseEntity<>(HttpStatus.EXPECTATION_FAILED);
    }


    /**
     * GET /weather/getStoredWeatherSetOfLocation : get stored weather of location
     * get stored weather of location
     *
     * @param city city e.g. Eisenstadt (required)
     * @return weatherset sucessfully loaded (status code 200)
     *         or bad input parameter (status code 400)
     */
    @ApiOperation(value = "get stored weather of location", nickname = "getStoredWeatherSetOfLocation", notes = "get stored weather of location", response = Weather.class, responseContainer = "List", tags={ "developers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "weatherset sucessfully loaded", response = Weather.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @GetMapping(
        value = "/weather/getStoredWeatherSetOfLocation",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Weather>> getStoredWeatherSetOfLocation(@NotNull @ApiParam(value = "city e.g. Eisenstadt", required = true) @Valid @RequestParam(value = "city", required = true) String city) {

        LogFactory.getLog(this.getClass()).info("getStoredWeatherSetOfLocation: "+city);

        ArrayList<Weather> weatherSet;

        try
        {
            weatherSet = new AwsDynamoDbConnector(Credentials.getInstance().getAwsAccessKey(), Credentials.getInstance().getAwsSecretKey())
                    .getStoredWeatherSetOfLocation(city);

            return new ResponseEntity<>(weatherSet, HttpStatus.OK);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }

        return new ResponseEntity<>(HttpStatus.EXPECTATION_FAILED);

    }


    /**
     * POST /weather/saveCurrentWeatherOfLocation : adds current weather to aws iot/dynamodb
     * adds current weather to aws iot/dynamodb
     *
     * @param city city (required)
     * @return weather saved (status code 201)
     *         or invalid input, object invalid (status code 400)
     */
    @ApiOperation(value = "adds current weather to aws iot/dynamodb", nickname = "saveCurrentWeatherOfLocation", notes = "adds current weather to aws iot/dynamodb", tags={ "developers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "weather saved"),
        @ApiResponse(code = 400, message = "invalid input, object invalid") })
    @PostMapping(
        value = "/weather/saveCurrentWeatherOfLocation"
    )
    default ResponseEntity<Void> saveCurrentWeatherOfLocation(@NotNull @ApiParam(value = "city", required = true) @Valid @RequestParam(value = "city", required = true) String city) {

        LogFactory.getLog(this.getClass()).info("saveCurrentWeatherOfLocation: "+city);

        Weather weather;
        Credentials credentials = Credentials.getInstance();

        try
        {
            weather = new WeatherstackConnector(credentials.getWeatherstackToken()).getCurrentWeatherOfLocation(city);

            AwsIotConnector awsIotConnector = new AwsIotConnector(credentials.getCaCertPath(), credentials.getCertPath(), credentials.getCaKeyPath());

            awsIotConnector.pushWeather(weather);

            return new ResponseEntity<Void>(HttpStatus.OK);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }

        return new ResponseEntity<>(HttpStatus.EXPECTATION_FAILED);

    }

}
